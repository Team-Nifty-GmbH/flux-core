<?php

namespace FluxErp\Livewire\Features\Calendar;

use FluxErp\Actions\CalendarEvent\CreateCalendarEvent;
use FluxErp\Contracts\Calendarable;
use FluxErp\Livewire\Forms\CalendarEventForm;
use FluxErp\Models\Address;
use FluxErp\Models\CalendarEvent;
use FluxErp\Models\User;
use FluxErp\Services\CalendarEventService;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\Relation;
use Illuminate\Support\Arr;
use Illuminate\Support\Carbon;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Date;
use Livewire\Attributes\Renderless;
use TeamNiftyGmbH\Calendar\CalendarComponent;

class FluxCalendar extends CalendarComponent
{
    public array $calendar = [];

    public ?int $calendarId;

    public string $tab = 'users';

    public string $search = '';

    public array $searchResults = [];

    public CalendarEventForm $event;

    public array $events = [];

    public bool $eventModal = false;

    // Settings
    public bool $editable = true;

    public string $editEventComponent = 'calendar.new-event';

    protected $listeners = [
        'eventClick' => 'onEventClick',
        'dateClick' => 'a',
    ];

    public function getMyCalendars(): Collection
    {
        $calendarables = model_info_all()
            ->filter(fn ($modelInfo) => in_array(Calendarable::class, $modelInfo->implements))
            ->map(fn ($modelInfo) => resolve_static($modelInfo->class, 'toCalendar'));

        return parent::getMyCalendars()
            ->merge($calendarables);
    }

    public function getEvents(array $info, array $calendarAttributes): array
    {
        if ($calendarAttributes['model_type'] ?? false) {
            return Relation::getMorphedModel($calendarAttributes['model_type'])::query()
                ->get()
                ->map(fn (Model $model) => $model->toCalendarEvent())
                ->toArray();
        }

        return parent::getEvents($info, $calendarAttributes);
    }

    #[Renderless]
    public function save(): void
    {
        dd('hi');
        if (! resolve_static(CreateCalendarEvent::class, 'canPerformAction', [false])) {
            return;
        }

        $this->calendarEvent['starts_at'] = Date::parse($this->calendarEvent['starts_at'])
            ->format('Y-m-d H:i');
        $this->calendarEvent['ends_at'] = Date::parse($this->calendarEvent['ends_at'])
            ->format('Y-m-d H:i');

        $this->calendarId = $this->calendarEvent['calendar_event']['calendar_id'] ?? null;
        $validated = $this->validate();

        $function = ($this->calendarEvent['id'] ?? false) ? 'update' : 'create';

        $response = (new CalendarEventService())->{$function}($validated['calendarEvent']);

        $calendarEvent = $response['data'] ?: $response;

        if ($function === 'update') {
            $events = Arr::keyBy($this->events, 'id');
            $events[$calendarEvent->id] = $this->mapEvents($calendarEvent)->toArray()[0];
        } else {
            $events = array_merge($this->events, $this->mapEvents($calendarEvent)->toArray());
        }

        $this->events = array_values($events);

        $this->eventModal = false;
        $this->dispatch('modelSaved', $calendarEvent->id)->to('folder-tree');
        $this->dispatch('refreshCalendar');
    }

    public function saveEvent(array $attributes): array|bool
    {
        dd($attributes);
    }

    public function saveCalendar(array $attributes): array
    {
        dd('calendar');
        return parent::saveCalendar($attributes); // TODO: Change the autogenerated stub
    }

    public function deleteCalendar(int $calendar): bool
    {
        return parent::deleteCalendar($calendar); // TODO: Change the autogenerated stub
    }

    #[Renderless]
    public function deleteEvent(int $event): bool
    {
        dd('a');
        if (! user_can('api.calendar-events.{id}.delete')) {
            return false;
        }

        $event = app(CalendarEvent::class)->query()
            ->whereKey($this->calendarEvent['id'] ?? null)
            ->firstOrFail();

        $event->delete();

        $events = Arr::keyBy($this->events, 'id');
        unset($events[$this->calendarEvent['id']]);
        $this->events = array_values($events);

        $this->eventModal = false;

        $this->dispatch('refreshCalendar');

        return true;
    }

//    #[Renderless]
//    public function onDayClick(?string $dateString = null): void
//    {
//        // This method gets called when a day is clicked
//        dd('DayClick');
//        $this->resetErrorBag();
//
//        $now = Carbon::now();
//        $date = $dateString ?
//            Carbon::parse($dateString)->setTime($now->hour, $now->minute)->floorMinutes(15) :
//            $now;
//
//        $calendarId = $this->calendarEvent['calendar_id'];
//        $this->reset('calendarEvent');
//
//        $this->calendarEvent['starts_at'] = $date->format('Y-m-d H:i');
//        $this->calendarEvent['ends_at'] = $date->format('Y-m-d H:i');
//        $this->calendarEvent['calendar_id'] = $calendarId;
//        $this->calendarEvent['disabled'] = false;
//
//        if (
//            Arr::keyBy(array_merge($this->calendars, $this->personalCalendars), 'id')[$calendarId]['user_id']
//            ?? false
//        ) {
//            $this->calendarEvent['model_type'] = auth()->user()->getMorphClass();
//            $this->calendarEvent['model_id'] = auth()->id();
//        }
//
//        $this->eventModal = true;
//    }

//    public function onEventClick(...$data): void
//    {
//        dd($data);
//        $this->resetErrorBag();
//
//        // This method is called when an event is clicked
//        $this->calendarEvent = app(CalendarEvent::class)->query()
//            ->whereKey($event)
//            ->first()
//            ->toArray();
//
//        $this->calendarEvent['disabled'] = false;
//
//        $this->eventModal = true;
//    }

//    #[Renderless]
//    public function onEventDropped(CalendarEvent $event, $data): void
//    {
//        dd('EventDropped');
//        // This method is called when an event was dropped on a new day
//        $event->starts_at = Date::parse($data['start'])->format('Y-m-d H:i');
//        $event->ends_at = Date::parse($data['end'] ?? $data['start'])->format('Y-m-d H:i');
//        $this->calendarEvent = $event->toArray();
//        $this->save();
//    }

    public function updatedCalendarEventStatus($value): void
    {
        dd('CalendarEventStatus');
        $calendarEvent = app(CalendarEvent::class)->query()
            ->whereKey($this->calendarEvent['id'])
            ->firstOrFail();

        $this->inviteStatus($calendarEvent, $value, $calendarEvent->calendar_id);
    }

    #[Renderless]
    public function updatedSearch(): void
    {
        $model = app($this->tab === 'users' ? User::class : Address::class);
        $this->searchResults = $this->search ? $model::search($this->search)->get()->toArray() : [];
    }

    #[Renderless]
    public function updatedTab(): void
    {
        $this->search = '';
        $this->searchResults = [];
    }

    #[Renderless]
    public function addInvitedRecord(int $id): void
    {
        $model = app($this->tab === 'users' ? User::class : Address::class);

        $this->addInvitee($model->query()->whereKey($id)->first());
    }

    #[Renderless]
    private function addInvitee(?Model $model): void
    {
        if (is_null($model)) {
            return;
        }

        $array = Arr::only($model->toArray(), ['id', 'name']);

        if ($model instanceof Address) {
            $this->calendarEvent['invited_addresses'][] = $array;
        } else {
            $this->calendarEvent['invited_users'][] = $array;
        }
    }
}
